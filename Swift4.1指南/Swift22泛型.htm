<!DOCTYPE html>
<!-- saved from url=(0157)https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID179 -->
<html lang="en" class="translated-ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">  
  <title>Swift编程语言（Swift 4.1）：泛型</title>
  <link rel="stylesheet" type="text/css" href="./Swift编程语言（Swift 4.1）：泛型_files/style-1.6.3.css">
  <link rel="stylesheet" type="text/css" href="./Swift编程语言（Swift 4.1）：泛型_files/feedback-1.6.3.css">
   
<meta id="j-version" name="j-version" content="">
<meta id="build" name="build" content="2cff7ac52859143a0b42c92c22d84718">
<meta id="document-version" name="document-version" content="10.3.3">
<meta id="book-assignments" name="book-assignments" content="{Type/Guide}, {Topic/Swift}">
<meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/TP40014097">
<meta id="chapterId" name="chapterId" content="TP40014097-CH26">
<meta id="book-title" name="book-title" content="The Swift Programming Language (Swift 4.1)">
<meta id="book-resource-type" name="book-resource-type" content="Guide">
<meta id="book-root" name="book-root" content="./">
<meta id="book-json" name="book-json" content="book.json">
<meta id="date" name="date" content="2018-02-20">
<meta id="description" name="description" content="The definitive guide to Swift, Apple’s programming language for building iOS, macOS, watchOS, and tvOS apps.">
<meta id="IndexTitle" name="IndexTitle" content="">
<meta id="resources-uri" name="resources-uri" content="../../../../Resources/1277">
<link id="book-index-page" rel="Start" title="" type="text/html" href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html">
<!-- , next_chapter: next_chapter, previous_chapter: previous_chapter -->
<link id="next-page" rel="Next" type="text/html" href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html">
<link id="previous-page" rel="Prev" type="text/html" href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html">
<meta id="devcenter" name="devcenter" content="&lt;!-- DEVCENTER_NAME --&gt;">
<meta id="devcenter-url" name="devcenter-url" content="&lt;!-- DEVCENTER_URL --&gt;">
<meta id="reflib" name="reflib" content="&lt;!-- REFLIB_NAME --&gt;">

<meta id="xcode-display" name="xcode-display" content="render">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
<meta id="platforms" name="platforms" content="Xcode Developer Tools">
<link type="text/css" rel="stylesheet" charset="UTF-8" href="./Swift编程语言（Swift 4.1）：泛型_files/translateelement.css"></head>

  <body id="conceptual_flow_with_tasks" class="jazz">
    
    <header id="ios_header" class="hideOnPrint hideInXcode">
  <div class="content-wrapper">
    <p class="header-text">
    	<a href="https://developer.apple.com/library/content/navigation/" onclick="s_objectID=&quot;https://developer.apple.com/library/content/navigation/_1&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">指南和示例代码
 		</font></font></a>
 </p>
    <p id="wwdr"><img id="apple_logo" src="./Swift编程语言（Swift 4.1）：泛型_files/apple2.png" height="14px" width="12px" aria-hidden="true"><a href="https://developer.apple.com/" onclick="s_objectID=&quot;https://developer.apple.com/_1&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">开发人员</font></font></a></p>
  </div>
</header>

    <section id="valence">
  <div class="content-wrapper">
    <p id="hierarchial_navigation">
      <span id="book_title"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Swift编程语言（Swift 4.1）</font></font></span>
    </p>
    <form id="search" class="hideInXcode" method="get" action="https://developer.apple.com/search/index.php" accept-charset="utf-8" autocomplete="off">
  <input type="search" id="ssi_SearchField" placeholder="Search Guides and Sample Code" name="q" autocomplete="off" tabindex="2">
</form>

      
   
   




    <span class="download-text hideInXcode">
      <a href="https://itunes.apple.com/us/book/the-swift-programming-language/id1002622538?mt=11" onclick="s_objectID=&quot;https://itunes.apple.com/us/book/the-swift-programming-language/id1002622538?mt=11_1&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的iBooks</font></font></a>
    </span>

    

    <img id="shortstack" src="./Swift编程语言（Swift 4.1）：泛型_files/shortstack_2x.png">
  </div>
</section>
    <div class="content-wrapper">
      <nav id="navigator" class="book-parts hideInXcode" role="navigation">
    <ul class="nav-parts">
        <li data-id="//apple_ref/doc/uid/TP40014097-CH1-ID2" class="part-name">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH3-ID0" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_1&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">欢迎来到Swift</font></font></a>
          <ul class="nav-chapters">
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-ID0" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH3-ID0" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_2&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">关于Swift</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Compatibility.html#//apple_ref/doc/uid/TP40014097-CH45-ID561" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH45-ID561" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_3&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">版本兼容性</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-ID1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH2-ID1" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_4&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">快速游览</font></font></a>
              </li>
          </ul>
        </li>
        <li data-id="//apple_ref/doc/uid/TP40014097-CH4-ID233" class="part-name nav-part-active open-part">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH5-ID309" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_5&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">语言指南</font></font></a>
          <ul class="nav-chapters">
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH5-ID309" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_6&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">基础</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/BasicOperators.html#//apple_ref/doc/uid/TP40014097-CH6-ID60" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH6-ID60" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_7&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">基本操作员</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html#//apple_ref/doc/uid/TP40014097-CH7-ID285" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH7-ID285" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_8&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">字符串和字符</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html#//apple_ref/doc/uid/TP40014097-CH8-ID105" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH8-ID105" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_9&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">集合类型</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID120" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH9-ID120" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_10&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">控制流</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-ID158" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH10-ID158" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_11&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">功能</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-ID94" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH11-ID94" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_12&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">关闭</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html#//apple_ref/doc/uid/TP40014097-CH12-ID145" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH12-ID145" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_13&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">枚举</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-ID82" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH13-ID82" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_14&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类和结构</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-ID254" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH14-ID254" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_15&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">属性</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Methods.html#//apple_ref/doc/uid/TP40014097-CH15-ID234" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH15-ID234" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_16&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Subscripts.html#//apple_ref/doc/uid/TP40014097-CH16-ID305" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH16-ID305" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_17&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">标</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Inheritance.html#//apple_ref/doc/uid/TP40014097-CH17-ID193" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH17-ID193" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_18&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">遗产</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID203" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH18-ID203" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_19&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">初始化</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Deinitialization.html#//apple_ref/doc/uid/TP40014097-CH19-ID142" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH19-ID142" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_20&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">反初始化</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-ID245" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH21-ID245" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_21&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">可选链接</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html#//apple_ref/doc/uid/TP40014097-CH42-ID508" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH42-ID508" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_22&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">错误处理</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TypeCasting.html#//apple_ref/doc/uid/TP40014097-CH22-ID338" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH22-ID338" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_23&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型铸造</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/NestedTypes.html#//apple_ref/doc/uid/TP40014097-CH23-ID242" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH23-ID242" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_24&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">嵌套类型</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html#//apple_ref/doc/uid/TP40014097-CH24-ID151" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH24-ID151" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_25&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">扩展</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html#//apple_ref/doc/uid/TP40014097-CH25-ID267" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH25-ID267" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_26&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议</font></font></a>
              </li>
              <li class="nav-chapter nav-current-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID179" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH26-ID179" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_27&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">泛型</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-ID48" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH20-ID48" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_28&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">自动引用计数</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/MemorySafety.html#//apple_ref/doc/uid/TP40014097-CH46-ID567" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH46-ID567" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_29&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">内存安全</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AccessControl.html#//apple_ref/doc/uid/TP40014097-CH41-ID3" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH41-ID3" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_30&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">访问控制</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html#//apple_ref/doc/uid/TP40014097-CH27-ID28" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH27-ID28" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_31&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">高级操作员</font></font></a>
              </li>
          </ul>
        </li>
        <li data-id="//apple_ref/doc/uid/TP40014097-CH28-ID427" class="part-name">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html#//apple_ref/doc/uid/TP40014097-CH29-ID345" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH29-ID345" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_32&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">语言参考</font></font></a>
          <ul class="nav-chapters">
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AboutTheLanguageReference.html#//apple_ref/doc/uid/TP40014097-CH29-ID345" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH29-ID345" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_33&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">关于语言参考</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/LexicalStructure.html#//apple_ref/doc/uid/TP40014097-CH30-ID410" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH30-ID410" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_34&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">词汇结构</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Types.html#//apple_ref/doc/uid/TP40014097-CH31-ID445" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH31-ID445" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_35&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/doc/uid/TP40014097-CH32-ID383" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH32-ID383" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_36&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">表达式</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Statements.html#//apple_ref/doc/uid/TP40014097-CH33-ID428" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH33-ID428" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_37&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">声明</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID351" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH34-ID351" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_38&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">声明</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html#//apple_ref/doc/uid/TP40014097-CH35-ID347" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH35-ID347" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_39&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">属性</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Patterns.html#//apple_ref/doc/uid/TP40014097-CH36-ID419" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH36-ID419" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_40&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">模式</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/GenericParametersAndArguments.html#//apple_ref/doc/uid/TP40014097-CH37-ID406" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH37-ID406" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_41&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">通用参数和参数</font></font></a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/zzSummaryOfTheGrammar.html#//apple_ref/doc/uid/TP40014097-CH38-ID458" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH38-ID458" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_42&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">语法概要</font></font></a>
              </li>
          </ul>
        </li>
        <li data-id="//apple_ref/doc/uid/TP40014097-CH39-ID460" class="part-name">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/RevisionHistory.html#//apple_ref/doc/uid/TP40014097-CH40-ID459" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH40-ID459" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_43&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">修订记录</font></font></a>
          <ul class="nav-chapters">
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/RevisionHistory.html#//apple_ref/doc/uid/TP40014097-CH40-ID459" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH40-ID459" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_44&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">文档修订历史</font></font></a>
              </li>
          </ul>
        </li>
    </ul>
</nav>

      <menu id="bashful" type="toolbar">
  <div class="shield"></div>
  <menuitem id="jump_to" class="menu-bar-item closed">
  <span><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在本页</font></font></span>
  <div class="chevron">
    <div class="chevy chevron-left"></div>
    <div class="chevy chevron-right"></div>
  </div>
  <menu type="list" class="details">
      <ul class="list-bullet">
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID180" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_45&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">泛型求解的问题</font></font></a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID181" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_46&quot;;return this.s_oc?this.s_oc(e):true">Generic Functions</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID182" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_47&quot;;return this.s_oc?this.s_oc(e):true">Type Parameters</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID183" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_48&quot;;return this.s_oc?this.s_oc(e):true">Naming Type Parameters</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID184" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_49&quot;;return this.s_oc?this.s_oc(e):true">Generic Types</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID185" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_50&quot;;return this.s_oc?this.s_oc(e):true">Extending a Generic Type</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID186" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_51&quot;;return this.s_oc?this.s_oc(e):true">Type Constraints</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID189" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_52&quot;;return this.s_oc?this.s_oc(e):true">Associated Types</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID192" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_53&quot;;return this.s_oc?this.s_oc(e):true">Generic Where Clauses</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID553" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_54&quot;;return this.s_oc?this.s_oc(e):true">Extensions with a Generic Where Clause</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID557" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_55&quot;;return this.s_oc?this.s_oc(e):true">Associated Types with a Generic Where Clause</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID558" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_56&quot;;return this.s_oc?this.s_oc(e):true">Generic Subscripts</a>
          </li>
      </ul>
  </menu>
</menuitem>

</menu>
<div class="pixel-line"></div>
<div class="rubber-band-gap"></div>
<article class="chapter">
  <a name="//apple_ref/doc/uid/TP40014097-CH26"></a><a name="//apple_ref/doc/uid/TP40014097-CH26-ID179"></a>

  <h2 class="chapter-name"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">泛型</font></font></h2>


  
  	<section class="section">
  		<p class="para">
  <em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">通用代码</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">使您能够编写灵活的，可重用的函数和类型，它们可以与任何类型一起使用，并符合您定义的要求。</font><font style="vertical-align: inherit;">您可以编写避免重复的代码，并以清晰抽象的方式表达其意图。
</font></font></p>
<p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  泛型是Swift最强大的特性之一，Swift标准库的大部分都是用泛型代码构建的。</font><font style="vertical-align: inherit;">实际上，</font><font style="vertical-align: inherit;">即使您没有意识到</font><font style="vertical-align: inherit;">，您在整个“ </font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">语言指南”中</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">都一直在使用泛型</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">例如，Swift </font></font><code class="code-voice">Array</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">Dictionary</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型都是泛型集合。</font><font style="vertical-align: inherit;">你可以创建一个包含</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值的数组，或者一个</font><font style="vertical-align: inherit;">包含</font><font style="vertical-align: inherit;">值的数组</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，或者确实可以在Swift中创建任何其他类型的数组。</font><font style="vertical-align: inherit;">同样，您可以创建一个字典来存储任何指定类型的值，并且对该类型可以是什么没有限制。
</font></font></p>

		</section> 


  <section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID180"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">泛型求解的问题</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  这是一个标准的非泛型函数</font></font><code class="code-voice">swapTwoInts(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，它可以交换两个</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">swapTwoInts</span>(<span class="kt">_</span> <span class="vc">a</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->Int<!-- /a --></span>, <span class="kt">_</span> <span class="vc">b</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->Int<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">temporaryA</span> = <span class="vc">a</span></code></li>
            <li><code class="code-voice">    <span class="vc">a</span> = <span class="vc">b</span></code></li>
            <li><code class="code-voice">    <span class="vc">b</span> = <span class="vc">temporaryA</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该功能利用了在出参数交换的值</font></font><code class="code-voice">a</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">b</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，如在描述</font></font><span class="x-name"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-ID173" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH10-ID173" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_57&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的In-Out参数</font></font></a></span><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">swapTwoInts(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数将原始值交换</font></font><code class="code-voice">b</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">为</font></font><code class="code-voice">a</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，并将原始值</font><font style="vertical-align: inherit;">交换</font></font><code class="code-voice">a</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">为</font></font><code class="code-voice">b</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">你可以调用这个函数来交换两个</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">变量</font><font style="vertical-align: inherit;">的值</font><font style="vertical-align: inherit;">：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">someInt</span> = <span class="m">3</span></code></li>
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">anotherInt</span> = <span class="m">107</span></code></li>
            <li><code class="code-voice"><span class="vc">swapTwoInts</span>(&amp;<span class="vc">someInt</span>, &amp;<span class="vc">anotherInt</span>)</code></li>
            <li><code class="code-voice"><span class="vc">print</span>(<span class="s">"someInt is now </span>\(<span class="vc">someInt</span>)<span class="s">, and anotherInt is now </span>\(<span class="vc">anotherInt</span>)<span class="s">"</span>)</code></li>
            <li><code class="code-voice"><span class="c">// Prints "someInt is now 107, and anotherInt is now 3"</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">swapTwoInts(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">功能很有用，但它只能与</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值</font><font style="vertical-align: inherit;">一起使用</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">如果你想交换两个</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值或两个</font></font><code class="code-voice">Double</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值，你必须编写更多的函数，比如</font><font style="vertical-align: inherit;">下面的函数</font></font><code class="code-voice">swapTwoStrings(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">swapTwoDoubles(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">swapTwoStrings</span>(<span class="kt">_</span> <span class="vc">a</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->String<!-- /a --></span>, <span class="kt">_</span> <span class="vc">b</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->String<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">temporaryA</span> = <span class="vc">a</span></code></li>
            <li><code class="code-voice">    <span class="vc">a</span> = <span class="vc">b</span></code></li>
            <li><code class="code-voice">    <span class="vc">b</span> = <span class="vc">temporaryA</span></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">swapTwoDoubles</span>(<span class="kt">_</span> <span class="vc">a</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->Double<!-- /a --></span>, <span class="kt">_</span> <span class="vc">b</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->Double<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">temporaryA</span> = <span class="vc">a</span></code></li>
            <li><code class="code-voice">    <span class="vc">a</span> = <span class="vc">b</span></code></li>
            <li><code class="code-voice">    <span class="vc">b</span> = <span class="vc">temporaryA</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  您可能已经注意到的尸体</font></font><code class="code-voice">swapTwoInts(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，</font></font><code class="code-voice">swapTwoStrings(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">swapTwoDoubles(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">功能是相同的。</font><font style="vertical-align: inherit;">唯一的区别是该值的，他们接受的类型（</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，和</font></font><code class="code-voice">Double</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  编写一个交换</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">任何</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型的</font><font style="vertical-align: inherit;">两个值的单个函数更有用，而且更灵活</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">通用代码使您能够编写这样的功能。</font><font style="vertical-align: inherit;">（这些函数的通用版本定义如下。）
</font></font></p><div class="note">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-NoLink_180"></a>
  <aside class="aside">
    <p class="aside-title"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">注意
    </font></font></p>
    	<p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在所有三个函数中，类型</font></font><code class="code-voice">a</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">b</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">必须是相同的。</font><font style="vertical-align: inherit;">如果</font></font><code class="code-voice">a</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">b</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">不是同一类型，则不可能交换它们的值。</font><font style="vertical-align: inherit;">Swift是一种类型安全的语言，不允许（例如）类型</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的变量和类型的变量</font></font><code class="code-voice">Double</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">相互交换值。</font><font style="vertical-align: inherit;">试图这样做会导致编译时错误。
    	</font></font></p>
    
  </aside>
</div>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID181"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">通用函数</font></font></h3>
  <p class="para">
  <em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">通用函数</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">可以处理任何类型。</font><font style="vertical-align: inherit;">这是</font></font><code class="code-voice">swapTwoInts(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">上面函数</font><font style="vertical-align: inherit;">的一个通用版本</font><font style="vertical-align: inherit;">，称为</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">swapTwoValues</span>&lt;<span class="vc">T</span>&gt;(<span class="kt">_</span> <span class="vc">a</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->T<!-- /a --></span>, <span class="kt">_</span> <span class="vc">b</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->T<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="kt">let</span> <span class="vc">temporaryA</span> = <span class="vc">a</span></code></li>
            <li><code class="code-voice">    <span class="vc">a</span> = <span class="vc">b</span></code></li>
            <li><code class="code-voice">    <span class="vc">b</span> = <span class="vc">temporaryA</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  所述的主体</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的功能是相同的身体</font></font><code class="code-voice">swapTwoInts(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">功能。</font><font style="vertical-align: inherit;">但是，第一行与第一行</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">稍有不同</font></font><code class="code-voice">swapTwoInts(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">以下是第一行比较的方式：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">swapTwoInts</span>(<span class="kt">_</span> <span class="vc">a</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->Int<!-- /a --></span>, <span class="kt">_</span> <span class="vc">b</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->Int<!-- /a --></span>)</code></li>
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">swapTwoValues</span>&lt;<span class="vc">T</span>&gt;(<span class="kt">_</span> <span class="vc">a</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->T<!-- /a --></span>, <span class="kt">_</span> <span class="vc">b</span>: <span class="kt">inout</span> <span class="n"><!-- a href="" -->T<!-- /a --></span>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该函数的通用版本使用</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">占位符</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的类型名（称为</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，在这种情况下），而不是一个</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">实际的</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型名称（例如</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">或</font></font><code class="code-voice">Double</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）。</font><font style="vertical-align: inherit;">占位符类型名字就不说了什么什么</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">必须的，但它</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">确实</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">说，双方</font></font><code class="code-voice">a</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">并</font></font><code class="code-voice">b</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">必须是同一类型的</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，不管</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">代表。</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">每次</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">调用函数</font><font style="vertical-align: inherit;">时都会确定</font><font style="vertical-align: inherit;">要使用的实际类型</font><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  泛型函数和非泛型函数之间的另一个区别在于泛型函数的名称（</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）后面跟着</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">尖括号（</font></font><code class="code-voice">&lt;T&gt;</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）中</font><font style="vertical-align: inherit;">的占位符类型名称</font><font style="vertical-align: inherit;">（</font><font style="vertical-align: inherit;">）。</font><font style="vertical-align: inherit;">括号告诉Swift，它</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数定义中</font><font style="vertical-align: inherit;">的占位符类型名称</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">因为</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是一个占位符，所以Swift不会寻找一个实际的类型</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">现在可以按照相同的方式调用</font><font style="vertical-align: inherit;">
  该</font><font style="vertical-align: inherit;">函数</font></font><code class="code-voice">swapTwoInts</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，只要它可以传递</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">任何</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型的</font><font style="vertical-align: inherit;">两个值</font><font style="vertical-align: inherit;">，只要这</font><font style="vertical-align: inherit;">两个值的</font><font style="vertical-align: inherit;">类型相同即可。</font><font style="vertical-align: inherit;">每次</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">调用时，要使用的类型</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">都是从传递给该函数的值的类型推断出来的。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  在下面的两个例子中，</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">被推断为</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">分别为：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">someInt</span> = <span class="m">3</span></code></li>
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">anotherInt</span> = <span class="m">107</span></code></li>
            <li><code class="code-voice"><span class="vc">swapTwoValues</span>(&amp;<span class="vc">someInt</span>, &amp;<span class="vc">anotherInt</span>)</code></li>
            <li><code class="code-voice"><span class="c">// someInt is now 107, and anotherInt is now 3</span></code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">someString</span> = <span class="s">"hello"</span></code></li>
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">anotherString</span> = <span class="s">"world"</span></code></li>
            <li><code class="code-voice"><span class="vc">swapTwoValues</span>(&amp;<span class="vc">someString</span>, &amp;<span class="vc">anotherString</span>)</code></li>
            <li><code class="code-voice"><span class="c">// someString is now "world", and anotherString is now "hello"</span></code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-NoLink_181"></a>
  <aside class="aside">
    <p class="aside-title"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">注意
    </font></font></p>
    	<p class="para"><font style="vertical-align: inherit;"></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">上面定义</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">函数受名为的通用函数的启发，该函数</font></font><code class="code-voice">swap</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是Swift标准库的一部分，并且会自动提供给您在您的应用程序中使用。</font><font style="vertical-align: inherit;">如果您需要</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在自己的代码中使用</font><font style="vertical-align: inherit;">该</font><font style="vertical-align: inherit;">函数</font><font style="vertical-align: inherit;">的行为，则</font><font style="vertical-align: inherit;">可以使用Swift的现有</font></font><code class="code-voice">swap(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数，而不是提供自己的实现。
    	</font></font></p>
    
  </aside>
</div>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID182"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型参数</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  在</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">上面</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">例子中，占位符类型</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是一个</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型参数</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的例子</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">类型参数指定并命名一个占位符类型，并在一对匹配的尖括号（如</font></font><code class="code-voice">&lt;T&gt;</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）</font><font style="vertical-align: inherit;">之间立即写入函数名称后面</font><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  一旦您指定一个类型参数，你可以用它来定义一个函数的参数（如类型</font></font><code class="code-voice">a</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，并</font></font><code class="code-voice">b</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在参数</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">功能），或作为函数的返回类型，或者作为函数体中的一个类型的注释。</font><font style="vertical-align: inherit;">在每种情况下，</font><font style="vertical-align: inherit;">只要函数被调用</font><font style="vertical-align: inherit;">，类型参数就会被</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">实际</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型</font><font style="vertical-align: inherit;">替换</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">（在</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">上面的例子中，</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">被替换</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的第一次调用函数，并与被替换</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，它被称为第二时间）。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  您可以通过在尖括号内写入多个类型参数名称来提供多个类型参数，并用逗号分隔。
</font></font></p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID183"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">命名类型参数</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  在大多数情况下，类型参数具有描述性的名称，如</font></font><code class="code-voice">Key</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">Value</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">中</font></font><code class="code-voice">Dictionary&lt;Key, Value&gt;</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">Element</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">中</font></font><code class="code-voice">Array&lt;Element&gt;</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，其中讲述的类型参数和泛型类型或功能它在使用之间的关系的读者。但是，如果没有它们之间建立有意义的关系，这是传统的给它们命名使用单个字母，例如</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，</font></font><code class="code-voice">U</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">V</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，如</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">上述功能。
</font></font></p><div class="note">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-NoLink_182"></a>
  <aside class="aside">
    <p class="aside-title"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">注意
    </font></font></p>
    	<p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">总是给出类型参数上面的驼峰大小写名称（例如</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">MyTypeParameter</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">），以表明它们是</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的占位符</font><font style="vertical-align: inherit;">，而不是值。
    	</font></font></p>
    
  </aside>
</div>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID184"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">泛型类型</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  除了泛型函数外，Swift还允许您定义自己的</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">泛型类型</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">这是自定义类，结构和枚举，可以一起工作</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的任何</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型，以类似的方式来</font></font><code class="code-voice">Array</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">Dictionary</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  本节介绍如何编写一个名为的通用集合类型</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">堆栈是一组有序的值，类似于数组，但具有比Swift </font></font><code class="code-voice">Array</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型</font><font style="vertical-align: inherit;">更有限的一组操作</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">数组允许在数组中的任何位置插入和移除新项目。</font><font style="vertical-align: inherit;">但是，堆栈允许将新项目仅附加到集合的末尾（称为</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">将</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">新值</font><em><font style="vertical-align: inherit;">推</font></em><font style="vertical-align: inherit;">入堆栈）。</font><font style="vertical-align: inherit;">同样，一个堆栈允许只从集合的末尾删除项目（称为</font><font style="vertical-align: inherit;">从堆栈中</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">弹出</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">一个值）。
</font></font></p><div class="note">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-NoLink_183"></a>
  <aside class="aside">
    <p class="aside-title"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">注意
    </font></font></p>
    	<p class="para"><font style="vertical-align: inherit;"></font><code class="code-voice">UINavigationController</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">该类</font><font style="vertical-align: inherit;">的概念用于</font><font style="vertical-align: inherit;">在其导航层次结构中对视图控制器建模。</font><font style="vertical-align: inherit;">您可以调用</font></font><code class="code-voice">UINavigationController</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类</font></font><code class="code-voice">pushViewController(_:animated:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法将视图控制器添加（或推送）到导航堆栈，以及从导航堆栈</font></font><code class="code-voice">popViewControllerAnimated(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">中删除（或弹出）视图控制器的方法。</font><font style="vertical-align: inherit;">无论何时需要严格的“先进先出”方法来管理集合，堆栈都是一个有用的集合模型。
    	</font></font></p>
    
  </aside>
</div><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  下图显示了堆栈的推送和弹出行为：
</font></font></p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Swift编程语言（Swift 4.1）：泛型_files/stackPushPop_2x.png" alt="image：../Art/stackPushPop_2x.png" width="664" height="273">
</figure><ol class="list-number">
  <li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  目前在堆栈中有三个值。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  第四个值被压入栈顶。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  堆栈现在包含四个值，最近的一个在顶部。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  弹出堆栈中的顶层项目。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  弹出一个值后，堆栈再次保存三个值。
</font></font></p>
</li>
</ol><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  以下是如何编写一个非通用版本的堆栈，在这种情况下，为一堆</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">struct</span> <span class="vc">IntStack</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">items</span> = [<span class="vc">Int</span>]()</code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">push</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">        <span class="vc">items</span>.<span class="vc">append</span>(<span class="vc">item</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">pop</span>() -&gt; <span class="n"><!-- a href="" -->Int<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">items</span>.<span class="vc">removeLast</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该结构使用一个</font></font><code class="code-voice">Array</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">调用</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">属性</font></font><code class="code-voice">items</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">将值存储在堆栈中。</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">提供了两种方法，</font></font><code class="code-voice">push</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">并</font></font><code class="code-voice">pop</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在堆栈上和堆栈之间推送和弹出值。</font><font style="vertical-align: inherit;">这些方法被标记为</font></font><code class="code-voice">mutating</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，因为它们需要修改（或</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">变异</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）结构的</font></font><code class="code-voice">items</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">数组。
</font></font></p><p class="para"><font style="vertical-align: inherit;"></font><code class="code-voice">IntStack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">上面显示</font><font style="vertical-align: inherit;">
  的</font><font style="vertical-align: inherit;">类型只能与</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值</font><font style="vertical-align: inherit;">一起使用</font><font style="vertical-align: inherit;">，但是。</font><font style="vertical-align: inherit;">定义一个</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">通用</font></font></em> <code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类可以管理</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">任何</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型的值</font><font style="vertical-align: inherit;">的堆栈</font><font style="vertical-align: inherit;">会更有用</font><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  以下是相同代码的通用版本：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">struct</span> <span class="vc">Stack</span>&lt;<span class="vc">Element</span>&gt; {</code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">items</span> = [<span class="vc">Element</span>]()</code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">push</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Element<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">        <span class="vc">items</span>.<span class="vc">append</span>(<span class="vc">item</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">pop</span>() -&gt; <span class="n"><!-- a href="" -->Element<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">items</span>.<span class="vc">removeLast</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  请注意，泛型版本</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">与非</font><font style="vertical-align: inherit;">泛型版本</font><font style="vertical-align: inherit;">基本相同，但是调用类型参数</font></font><code class="code-voice">Element</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">而不是实际类型</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">此类型参数写在</font></font><code class="code-voice">&lt;Element&gt;</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">结构名称后面的</font><font style="vertical-align: inherit;">一对尖括号（</font><font style="vertical-align: inherit;">）中。
</font></font></p><p class="para">
  <code class="code-voice">Element</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">为稍后提供的类型定义一个占位符名称。</font><font style="vertical-align: inherit;">这种未来类型可以被称为</font></font><code class="code-voice">Element</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">结构定义中的任何地方。</font><font style="vertical-align: inherit;">在这种情况下，</font></font><code class="code-voice">Element</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在三个地方用作占位符：
</font></font></p><ul class="list-bullet">
  <li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  创建一个名为的属性</font></font><code class="code-voice">items</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，该</font><font style="vertical-align: inherit;">属性</font><font style="vertical-align: inherit;">使用空的数组类型进行初始化</font></font><code class="code-voice">Element</code>
</p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  指定该</font></font><code class="code-voice">push(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法具有一个调用的单个参数</font></font><code class="code-voice">item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，该</font><font style="vertical-align: inherit;">参数</font><font style="vertical-align: inherit;">必须是类型的</font></font><code class="code-voice">Element</code>
</p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  指定该</font></font><code class="code-voice">pop()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法</font><font style="vertical-align: inherit;">返回的值</font><font style="vertical-align: inherit;">将是一个类型的值</font></font><code class="code-voice">Element</code>
</p>
</li>
</ul><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  因为它是一个通用型，</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">可用于创建一叠</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">任何</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">斯威夫特有效的类型，以类似的方式来</font></font><code class="code-voice">Array</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">Dictionary</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">通过在尖括号内写入要存储在堆栈中的类型来</font><font style="vertical-align: inherit;">
  创建一个新</font><font style="vertical-align: inherit;">实例。</font><font style="vertical-align: inherit;">例如，要创建一个新的字符串堆栈，可以这样写</font></font><code class="code-voice">Stack&lt;String&gt;()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">stackOfStrings</span> = <span class="vc">Stack</span>&lt;<span class="n"><!-- a href="" -->String<!-- /a --></span>&gt;()</code></li>
            <li><code class="code-voice"><span class="vc">stackOfStrings</span>.<span class="vc">push</span>(<span class="s">"uno"</span>)</code></li>
            <li><code class="code-voice"><span class="vc">stackOfStrings</span>.<span class="vc">push</span>(<span class="s">"dos"</span>)</code></li>
            <li><code class="code-voice"><span class="vc">stackOfStrings</span>.<span class="vc">push</span>(<span class="s">"tres"</span>)</code></li>
            <li><code class="code-voice"><span class="vc">stackOfStrings</span>.<span class="vc">push</span>(<span class="s">"cuatro"</span>)</code></li>
            <li><code class="code-voice"><span class="c">// the stack now contains 4 strings</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  下面是</font></font><code class="code-voice">stackOfStrings</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">将这四个值推入堆栈后</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">外观：
</font></font></p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Swift编程语言（Swift 4.1）：泛型_files/stackPushedFourStrings_2x.png" alt="image：../Art/stackPushedFourStrings_2x.png" width="664" height="218">
</figure><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  从堆栈中弹出一个值将删除并返回顶部值</font></font><code class="code-voice">"cuatro"</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">fromTheTop</span> = <span class="vc">stackOfStrings</span>.<span class="vc">pop</span>()</code></li>
            <li><code class="code-voice"><span class="c">// fromTheTop is equal to "cuatro", and the stack now contains 3 strings</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  以下是弹出最高值后堆栈的外观：
</font></font></p><figure class="figure">
  
  <span class="caption"></span>
  <img src="./Swift编程语言（Swift 4.1）：泛型_files/stackPoppedOneString_2x.png" alt="image：../Art/stackPoppedOneString_2x.png" width="405" height="207">
</figure>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID185"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">扩展一个通用类型</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  扩展泛型时，不提供类型参数列表作为扩展定义的一部分。</font><font style="vertical-align: inherit;">相反，</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">原始</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型定义中</font><font style="vertical-align: inherit;">的类型参数列表</font><font style="vertical-align: inherit;">在扩展的主体中可用，并且原始类型参数名称用于引用原始定义中的类型参数。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  以下示例扩展泛型</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型以添加​​名为的只读计算属性</font></font><code class="code-voice">topItem</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，该</font><font style="vertical-align: inherit;">属性</font><font style="vertical-align: inherit;">返回堆栈中的顶层项目，而不弹出堆栈中的顶层项目：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">extension</span> <span class="n"><!-- a href="" -->Stack<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">topItem</span>: <span class="n"><!-- a href="" -->Element<!-- /a --></span>? {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">items</span>.<span class="vc">isEmpty</span> ? <span class="kt">nil</span> : <span class="vc">items</span>[<span class="vc">items</span>.<span class="vc">count</span> - <span class="m">1</span>]</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">topItem</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">属性返回一个可选的类型值</font></font><code class="code-voice">Element</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">如果堆栈为空，则</font></font><code class="code-voice">topItem</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">返回</font></font><code class="code-voice">nil</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">; </font><font style="vertical-align: inherit;">如果堆栈不为空，则</font></font><code class="code-voice">topItem</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">返回</font></font><code class="code-voice">items</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">数组中</font><font style="vertical-align: inherit;">的最后一项</font><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  请注意，此扩展未定义类型参数列表。</font><font style="vertical-align: inherit;">而是</font><font style="vertical-align: inherit;">在扩展中使用</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型的现有类型参数名称，</font></font><code class="code-voice">Element</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">以指示</font></font><code class="code-voice">topItem</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">计算属性</font><font style="vertical-align: inherit;">的可选类型</font><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  在</font></font><code class="code-voice">topItem</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">计算性能，现在可以与任何使用</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">实例来访问，而没有删除它查询其顶端的项目。
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">if</span> <span class="kt">let</span> <span class="vc">topItem</span> = <span class="vc">stackOfStrings</span>.<span class="vc">topItem</span> {</code></li>
            <li><code class="code-voice">    <span class="vc">print</span>(<span class="s">"The top item on the stack is </span>\(<span class="vc">topItem</span>)<span class="s">."</span>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><span class="c">// Prints "The top item on the stack is tres."</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  通用类型的扩展还可以包括扩展类型的实例必须满足以获得新功能的要求，正如在</font><font style="vertical-align: inherit;">下面</font></font><span class="x-name"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID553" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH26-ID553" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_58&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的通用Where子句的扩展中</font></font></a></span><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">所讨论的</font><font style="vertical-align: inherit;">。
</font></font></p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID186"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型约束</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">swapTwoValues(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">功能和</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型可以与任何类型的工作。</font><font style="vertical-align: inherit;">但是，</font><font style="vertical-align: inherit;">对可以与泛型函数和泛型类型一起使用的类型</font><font style="vertical-align: inherit;">强制执行某些</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型约束</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">有时很有用</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">类型约束指定类型参数必须从特定的类继承，或者符合特定的协议或协议组合。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  例如，Swift的</font></font><code class="code-voice">Dictionary</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型对可用作字典键</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">类型进行了限制。</font><font style="vertical-align: inherit;">如</font></font><span class="x-name"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html#//apple_ref/doc/uid/TP40014097-CH8-ID113" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH8-ID113" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_59&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">字典</font></font></a></span><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">所述，</font><span class="x-name"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html#//apple_ref/doc/uid/TP40014097-CH8-ID113" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH8-ID113" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_59&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;">字典</font></a></span><font style="vertical-align: inherit;">键的类型必须是可</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">散列的</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">也就是说，它必须提供一种使自己唯一可代表的方式。</font></font><code class="code-voice">Dictionary</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">需要它的密钥是可散列的，以便它可以检查它是否已经包含特定密钥的值。</font><font style="vertical-align: inherit;">如果没有这个要求，</font></font><code class="code-voice">Dictionary</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">无法判断它是否应该插入或替换某个特定键的值，也不能找到字典中已有键的值。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  这个要求是通过对key类型的类型约束来实施的</font></font><code class="code-voice">Dictionary</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，它指定了密钥类型必须符合</font></font><code class="code-voice">Hashable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议，这是一个在Swift标准库中定义的特殊协议。</font><font style="vertical-align: inherit;">所有斯威夫特的基本类型（例如</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，</font></font><code class="code-voice">Double</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，和</font></font><code class="code-voice">Bool</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）默认情况下可哈希。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  您可以在创建自定义泛型时定义自己的类型约束，这些约束提供了泛型编程的很多功能。</font><font style="vertical-align: inherit;">抽象概念喜欢</font></font><code class="code-voice">Hashable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">根据其概念特征来表征类型，而不是其具体类型。
</font></font></p>
  <section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID187"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型约束语法</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  通过在类型参数的名称之后放置单个类或协议约束（用冒号分隔）作为类型参数列表的一部分来编写类型约束。</font><font style="vertical-align: inherit;">泛型函数的类型约束的基本语法如下所示（尽管泛型类型的语法是相同的）：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">someFunction</span>&lt;<span class="vc">T</span>: <span class="n"><!-- a href="" -->SomeClass<!-- /a --></span>, <span class="vc">U</span>: <span class="n"><!-- a href="" -->SomeProtocol<!-- /a --></span>&gt;(<span class="vc">someT</span>: <span class="n"><!-- a href="" -->T<!-- /a --></span>, <span class="vc">someU</span>: <span class="n"><!-- a href="" -->U<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">    <span class="c">// function body goes here</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  上面的假设函数有两个类型参数。</font><font style="vertical-align: inherit;">第一个类型参数，</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">有一个类型约束，需要</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">成为的子类</font></font><code class="code-voice">SomeClass</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">第二个类型参数，</font></font><code class="code-voice">U</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">具有需要</font></font><code class="code-voice">U</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">符合协议</font><font style="vertical-align: inherit;">的类型约束</font></font><code class="code-voice">SomeProtocol</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID188"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型约束在行动</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  这是一个非泛型函数</font></font><code class="code-voice">findIndex(ofString:in:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，它被赋予一个</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值来查找并</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">找到它</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">值</font><font style="vertical-align: inherit;">的数组</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">该</font></font><code class="code-voice">findIndex(ofString:in:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数返回一个可选</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值，该值是数组中第一个匹配字符串的索引（如果找到</font></font><code class="code-voice">nil</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">该字符串）</font><font style="vertical-align: inherit;">，或者</font><font style="vertical-align: inherit;">该字符串不可找到：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">findIndex</span>(<span class="vc">ofString</span> <span class="vc">valueToFind</span>: <span class="n"><!-- a href="" -->String<!-- /a --></span>, <span class="vc">in</span> <span class="vc">array</span>: [<span class="n"><!-- a href="" -->String<!-- /a --></span>]) -&gt; <span class="n"><!-- a href="" -->Int<!-- /a --></span>? {</code></li>
            <li><code class="code-voice">    <span class="kt">for</span> (<span class="vc">index</span>, <span class="vc">value</span>) <span class="kt">in</span> <span class="vc">array</span>.<span class="vc">enumerated</span>() {</code></li>
            <li><code class="code-voice">        <span class="kt">if</span> <span class="vc">value</span> == <span class="vc">valueToFind</span> {</code></li>
            <li><code class="code-voice">            <span class="kt">return</span> <span class="vc">index</span></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">return</span> <span class="kt">nil</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">findIndex(ofString:in:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数可用于在字符串数组中找到字符串值：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">strings</span> = [<span class="s">"cat"</span>, <span class="s">"dog"</span>, <span class="s">"llama"</span>, <span class="s">"parakeet"</span>, <span class="s">"terrapin"</span>]</code></li>
            <li><code class="code-voice"><span class="kt">if</span> <span class="kt">let</span> <span class="vc">foundIndex</span> = <span class="vc">findIndex</span>(<span class="vc">ofString</span>: <span class="s">"llama"</span>, <span class="vc">in</span>: <span class="vc">strings</span>) {</code></li>
            <li><code class="code-voice">    <span class="vc">print</span>(<span class="s">"The index of llama is </span>\(<span class="vc">foundIndex</span>)<span class="s">"</span>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><span class="c">// Prints "The index of llama is 2"</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  然而，找到数组中的值的索引的原理并不仅适用于字符串。</font><font style="vertical-align: inherit;">您可以通过用某种类型的值替换任何字符串来编写与通用函数相同的功能</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  以下是您可能期望</font><font style="vertical-align: inherit;">写入的</font></font><code class="code-voice">findIndex(ofString:in:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">所谓</font><font style="vertical-align: inherit;">的通用版本</font></font><code class="code-voice">findIndex(of:in:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">请注意，此函数的返回类型仍然是</font></font><code class="code-voice">Int?</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，因为函数返回一个可选的索引号，而不是数组中的可选值。</font><font style="vertical-align: inherit;">但要注意，这个函数不能编译，因为在这个例子之后解释的原因：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">findIndex</span>&lt;<span class="vc">T</span>&gt;(<span class="vc">of</span> <span class="vc">valueToFind</span>: <span class="n"><!-- a href="" -->T<!-- /a --></span>, <span class="vc">in</span> <span class="vc">array</span>:[<span class="n"><!-- a href="" -->T<!-- /a --></span>]) -&gt; <span class="n"><!-- a href="" -->Int<!-- /a --></span>? {</code></li>
            <li><code class="code-voice">    <span class="kt">for</span> (<span class="vc">index</span>, <span class="vc">value</span>) <span class="kt">in</span> <span class="vc">array</span>.<span class="vc">enumerated</span>() {</code></li>
            <li><code class="code-voice">        <span class="kt">if</span> <span class="vc">value</span> == <span class="vc">valueToFind</span> {</code></li>
            <li><code class="code-voice">            <span class="kt">return</span> <span class="vc">index</span></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">return</span> <span class="kt">nil</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  这个函数不像上面写的那样编译。</font><font style="vertical-align: inherit;">问题在于平等检查，“ </font></font><code class="code-voice">if value == valueToFind</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">”。</font><font style="vertical-align: inherit;">并非Swift中的每个类型都可以与等号运算符（</font></font><code class="code-voice">==</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）</font><font style="vertical-align: inherit;">进行比较</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">例如，如果您创建自己的类或结构来表示复杂的数据模型，那么对于该类或结构而言，“等于”的含义不是Swift可以为您猜测的。</font><font style="vertical-align: inherit;">因此，不可能保证此代码适用于</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">所有</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">可能的类型</font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，并且在尝试编译代码时会报告相应的错误。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  然而，所有的东西都不会丢失。</font><font style="vertical-align: inherit;">Swift标准库定义了一个调用的协议</font></font><code class="code-voice">Equatable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，它要求任何符合类型实现等于运算符（</font></font><code class="code-voice">==</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）和不等于运算符（</font></font><code class="code-voice">!=</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）来比较该类型的任何两个值。</font><font style="vertical-align: inherit;">所有Swift的标准类型都自动支持该</font></font><code class="code-voice">Equatable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  任何类型</font></font><code class="code-voice">Equatable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的</font></font><code class="code-voice">findIndex(of:in:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数</font><font style="vertical-align: inherit;">都可以安全地使用</font><font style="vertical-align: inherit;">，因为它保证支持等于操作符。</font><font style="vertical-align: inherit;">为了表达这个事实，</font></font><code class="code-voice">Equatable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">当你定义函数时</font><font style="vertical-align: inherit;">，你写了一个类型约束</font><font style="vertical-align: inherit;">作为类型参数定义的一部分：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">findIndex</span>&lt;<span class="vc">T</span>: <span class="n"><!-- a href="" -->Equatable<!-- /a --></span>&gt;(<span class="vc">of</span> <span class="vc">valueToFind</span>: <span class="n"><!-- a href="" -->T<!-- /a --></span>, <span class="vc">in</span> <span class="vc">array</span>:[<span class="n"><!-- a href="" -->T<!-- /a --></span>]) -&gt; <span class="n"><!-- a href="" -->Int<!-- /a --></span>? {</code></li>
            <li><code class="code-voice">    <span class="kt">for</span> (<span class="vc">index</span>, <span class="vc">value</span>) <span class="kt">in</span> <span class="vc">array</span>.<span class="vc">enumerated</span>() {</code></li>
            <li><code class="code-voice">        <span class="kt">if</span> <span class="vc">value</span> == <span class="vc">valueToFind</span> {</code></li>
            <li><code class="code-voice">            <span class="kt">return</span> <span class="vc">index</span></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">return</span> <span class="kt">nil</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  单一类型参数</font></font><code class="code-voice">findIndex(of:in:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">写成</font></font><code class="code-voice">T: Equatable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，意思是“ </font></font><code class="code-voice">T</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">符合</font></font><code class="code-voice">Equatable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议的</font><font style="vertical-align: inherit;">任何类型</font><font style="vertical-align: inherit;">”。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">findIndex(of:in:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数现在编译成功，可以用于任何类型</font></font><code class="code-voice">Equatable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，如</font></font><code class="code-voice">Double</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">或</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">doubleIndex</span> = <span class="vc">findIndex</span>(<span class="vc">of</span>: <span class="m">9.3</span>, <span class="vc">in</span>: [<span class="m">3.14159</span>, <span class="m">0.1</span>, <span class="m">0.25</span>])</code></li>
            <li><code class="code-voice"><span class="c">// doubleIndex is an optional Int with no value, because 9.3 isn't in the array</span></code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">stringIndex</span> = <span class="vc">findIndex</span>(<span class="vc">of</span>: <span class="s">"Andrea"</span>, <span class="vc">in</span>: [<span class="s">"Mike"</span>, <span class="s">"Malcolm"</span>, <span class="s">"Andrea"</span>])</code></li>
            <li><code class="code-voice"><span class="c">// stringIndex is an optional Int containing a value of 2</span></code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>

</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID189"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">相关类型</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  在定义协议时，将一个或多个关联类型声明为协议定义的一部分有时很有用。</font><font style="vertical-align: inherit;">一个</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">相关联的类型</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">给出了一个占位符名称到被用作协议的一部分的类型。</font><font style="vertical-align: inherit;">在采用该协议之前，不会指定用于该关联类型的实际类型。</font><font style="vertical-align: inherit;">关联的类型由</font></font><code class="code-voice">associatedtype</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">关键字</font><font style="vertical-align: inherit;">指定</font><font style="vertical-align: inherit;">。
</font></font></p>
  <section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID190"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">关联的类型在行动</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  以下是一个调用协议的示例</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，它声明了一个名为的关联类型</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">protocol</span> <span class="vc">Container</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">associatedtype</span> <span class="vc">Item</span></code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">append</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Item<!-- /a --></span>)</code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">count</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span> { <span class="kt">get</span> }</code></li>
            <li><code class="code-voice">    <span class="kt">subscript</span>(<span class="vc">i</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Item<!-- /a --></span> { <span class="kt">get</span> }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议定义了任何容器必须提供的三种必需的功能：
</font></font></p><ul class="list-bullet">
  <li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  使用方法必须可以将新项目添加到容器</font></font><code class="code-voice">append(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  必须可以通过</font></font><code class="code-voice">count</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">返回</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">属性</font><font style="vertical-align: inherit;">访问容器中的项目数</font><font style="vertical-align: inherit;">。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  必须可以使用带有</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">索引值</font><font style="vertical-align: inherit;">的下标来检索容器中的每个项目</font><font style="vertical-align: inherit;">。
</font></font></p>
</li>
</ul><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该协议并未指定容器中的项目应如何存储或允许的类型。</font><font style="vertical-align: inherit;">协议只规定了任何类型为了被认为是必须提供的三个功能位</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">符合类型可以提供额外的功能，只要满足这三个要求即可。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  任何符合</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议的类型都必须能够指定它存储的值的类型。</font><font style="vertical-align: inherit;">具体来说，它必须确保只有正确类型的项目才会添加到容器中，并且必须清楚其下标所返回项目的类型。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  为了定义这些需求，</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议需要一种方法来引用容器将容纳的元素的类型，而不知道特定容器的类型。</font><font style="vertical-align: inherit;">该</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议需要指定传递给该</font></font><code class="code-voice">append(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法的</font><font style="vertical-align: inherit;">任何值</font><font style="vertical-align: inherit;">必须具有与该容器的元素类型相同的类型，并且该容器的下标返回的值将与该容器的元素类型具有相同的类型。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  为了达到这个目的，</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议声明了一个名为的关联类型</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，写为</font></font><code class="code-voice">associatedtype Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">该协议没有定义什么</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是 - 该信息留给任何符合类型提供。</font><font style="vertical-align: inherit;">尽管如此，</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">别名提供了一种方法来引用a中的项目类型</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，并定义一种用于</font></font><code class="code-voice">append(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法和下标的类型，以确保</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">强制执行</font><font style="vertical-align: inherit;">任何预期的行为</font><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  以下是</font></font><code class="code-voice">IntStack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">来自早期</font><font style="vertical-align: inherit;">的非通用</font><font style="vertical-align: inherit;">类型</font><font style="vertical-align: inherit;">的一个版本</font><font style="vertical-align: inherit;">，以适应</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">struct</span> <span class="vc">IntStack</span>: <span class="n"><!-- a href="" -->Container<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    <span class="c">// original IntStack implementation</span></code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">items</span> = [<span class="vc">Int</span>]()</code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">push</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">        <span class="vc">items</span>.<span class="vc">append</span>(<span class="vc">item</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">pop</span>() -&gt; <span class="n"><!-- a href="" -->Int<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">items</span>.<span class="vc">removeLast</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="c">// conformance to the Container protocol</span></code></li>
            <li><code class="code-voice">    <span class="kt">typealias</span> <span class="vc">Item</span> = <span class="n"><!-- a href="" -->Int<!-- /a --></span></code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">append</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">        <span class="kt">self</span>.<span class="vc">push</span>(<span class="vc">item</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">count</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">items</span>.<span class="vc">count</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">subscript</span>(<span class="vc">i</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Int<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">items</span>[<span class="vc">i</span>]</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">IntStack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型实现了</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议</font><font style="vertical-align: inherit;">所有三个</font><font style="vertical-align: inherit;">要求，并且在每种情况下都包装了该</font></font><code class="code-voice">IntStack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型现有功能的一部分以满足这些要求。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  而且，</font></font><code class="code-voice">IntStack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">指定对于这个实现</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，适当</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">使用是一种类型的</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">该定义</font></font><code class="code-voice">typealias Item = Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">将抽象类型</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">转换</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">为该</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议</font><font style="vertical-align: inherit;">实现的</font><font style="vertical-align: inherit;">具体类型</font><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  感谢Swift的类型推断，你实际上不需要声明具体</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">作为定义的一部分</font></font><code class="code-voice">IntStack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">因为</font></font><code class="code-voice">IntStack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">符合</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议的</font><font style="vertical-align: inherit;">所有要求，所以</font><font style="vertical-align: inherit;">Swift可以</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">简单地通过查看</font></font><code class="code-voice">append(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法</font></font><code class="code-voice">item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">参数的类型和下标的返回类型</font><font style="vertical-align: inherit;">来推断适当</font><font style="vertical-align: inherit;">的使用</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">的确，如果你</font></font><code class="code-voice">typealias Item = Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">从上面的代码中</font><font style="vertical-align: inherit;">删除了这一</font><font style="vertical-align: inherit;">行，所有东西仍然有效，因为很清楚应该使用哪种类型</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  您也可以使通用</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型符合</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">struct</span> <span class="vc">Stack</span>&lt;<span class="vc">Element</span>&gt;: <span class="n"><!-- a href="" -->Container<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    <span class="c">// original Stack&lt;Element&gt; implementation</span></code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">items</span> = [<span class="vc">Element</span>]()</code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">push</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Element<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">        <span class="vc">items</span>.<span class="vc">append</span>(<span class="vc">item</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">pop</span>() -&gt; <span class="n"><!-- a href="" -->Element<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">items</span>.<span class="vc">removeLast</span>()</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="c">// conformance to the Container protocol</span></code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">append</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Element<!-- /a --></span>) {</code></li>
            <li><code class="code-voice">        <span class="kt">self</span>.<span class="vc">push</span>(<span class="vc">item</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">count</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">items</span>.<span class="vc">count</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="kt">subscript</span>(<span class="vc">i</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Element<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">items</span>[<span class="vc">i</span>]</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  这次，类型参数</font></font><code class="code-voice">Element</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">被用作</font></font><code class="code-voice">append(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法</font></font><code class="code-voice">item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">参数的类型和下标的返回类型。</font><font style="vertical-align: inherit;">因此，Swift可以推断这</font></font><code class="code-voice">Element</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">用于这个特定容器</font><font style="vertical-align: inherit;">的适当类型</font><font style="vertical-align: inherit;">。
</font></font></p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID191"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">扩展现有类型以指定关联类型</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  您可以扩展现有类型以添加​​协议，如</font></font><span class="x-name"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html#//apple_ref/doc/uid/TP40014097-CH25-ID277" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH25-ID277" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_60&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">添加扩展协议一致性中</font></font></a></span><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">所述</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">这包括一个关联类型的协议。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  Swift的</font></font><code class="code-voice">Array</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型已经提供了一个</font></font><code class="code-voice">append(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法，一个</font></font><code class="code-voice">count</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">属性和一个带</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">索引</font><font style="vertical-align: inherit;">的下标</font><font style="vertical-align: inherit;">来检索它的元素。</font><font style="vertical-align: inherit;">这三个功能符合</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议</font><font style="vertical-align: inherit;">的要求</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">这意味着您可以</font><font style="vertical-align: inherit;">简单地通过声明</font><font style="vertical-align: inherit;">采用协议</font><font style="vertical-align: inherit;">来扩展</font></font><code class="code-voice">Array</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">以符合</font><font style="vertical-align: inherit;">协议。</font><font style="vertical-align: inherit;">您可以使用空白扩展名来执行此操作，如</font><span class="x-name"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html#//apple_ref/doc/uid/TP40014097-CH25-ID278" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH25-ID278" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_61&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;">使用扩展声明协议采用中</font></a></span><font style="vertical-align: inherit;">所述</font><font style="vertical-align: inherit;">：
</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"></font><code class="code-voice">Array</code><font style="vertical-align: inherit;"></font><span class="x-name"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html#//apple_ref/doc/uid/TP40014097-CH25-ID278" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH25-ID278" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_61&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"></font></a></span><font style="vertical-align: inherit;"></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">extension</span> <span class="n"><!-- a href="" -->Array<!-- /a --></span>: <span class="n"><!-- a href="" -->Container<!-- /a --></span> {}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  Array的现有</font></font><code class="code-voice">append(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法和下标使Swift能够推断出适用的类型</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，就像</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">上面</font><font style="vertical-align: inherit;">的泛型一样</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">定义这个扩展后，你可以使用任何</font></font><code class="code-voice">Array</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">一个</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID560"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">使用类型注释来约束关联的类型</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  您可以将类型注释添加到协议中的关联类型中，以要求符合类型满足类型注释描述的约束。</font><font style="vertical-align: inherit;">例如，下面的代码定义了一个</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">需要容器中的项目可以相等的版本。
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">protocol</span> <span class="vc">Container</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">associatedtype</span> <span class="vc">Item</span>: <span class="n"><!-- a href="" -->Equatable<!-- /a --></span></code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">append</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Item<!-- /a --></span>)</code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">count</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span> { <span class="kt">get</span> }</code></li>
            <li><code class="code-voice">    <span class="kt">subscript</span>(<span class="vc">i</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Item<!-- /a --></span> { <span class="kt">get</span> }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  为了符合这个版本</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，容器的</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型必须符合</font></font><code class="code-voice">Equatable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议。
</font></font></p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID575"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在其关联类型的约束中使用协议</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  协议可以作为其自身要求的一部分出现。</font><font style="vertical-align: inherit;">例如，这是一个改进</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议的协议，增加了</font></font><code class="code-voice">suffix(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法</font><font style="vertical-align: inherit;">的要求</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">该</font></font><code class="code-voice">suffix(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法从容器的末尾返回给定数量的元素，将它们存储在</font></font><code class="code-voice">Suffix</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型</font><font style="vertical-align: inherit;">的实例中</font><font style="vertical-align: inherit;">。
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">protocol</span> <span class="vc">SuffixableContainer</span>: <span class="n"><!-- a href="" -->Container<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    <span class="kt">associatedtype</span> <span class="vc">Suffix</span>: <span class="n"><!-- a href="" -->SuffixableContainer<!-- /a --></span> <span class="kt">where</span> <span class="n"><!-- a href="" -->Suffix<!-- /a --></span>.<span class="n"><!-- a href="" -->Item<!-- /a --></span> == <span class="n"><!-- a href="" -->Item<!-- /a --></span></code></li>
            <li><code class="code-voice">    <span class="kt">func</span> <span class="vc">suffix</span>(<span class="kt">_</span> <span class="vc">size</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Suffix<!-- /a --></span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  在这个协议中，</font></font><code class="code-voice">Suffix</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是一个关联类型，就像</font><font style="vertical-align: inherit;">上面例子中</font><font style="vertical-align: inherit;">的</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font></font><code class="code-voice">Suffix</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">有两个约束：它必须符合</font></font><code class="code-voice">SuffixableContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议（当前正在定义的协议），其</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型必须与容器的</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型</font><font style="vertical-align: inherit;">相同</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">约束</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是一个通用的</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句，在下面的</font></font><span class="x-name"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID557" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH26-ID557" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_62&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">关联类型中使用</font></font></a></span><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">通用的</font><font style="vertical-align: inherit;">子句讨论</font><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  这是</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">以前</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">类型</font><font style="vertical-align: inherit;">扩展</font><font style="vertical-align: inherit;">，增加了</font></font><code class="code-voice">SuffixableContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议的</font><font style="vertical-align: inherit;">一致性</font><font style="vertical-align: inherit;">：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">extension</span> <span class="n"><!-- a href="" -->Stack<!-- /a --></span>: <span class="n"><!-- a href="" -->SuffixableContainer<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    <span class="kt">func</span> <span class="vc">suffix</span>(<span class="kt">_</span> <span class="vc">size</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Stack<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">var</span> <span class="vc">result</span> = <span class="vc">Stack</span>()</code></li>
            <li><code class="code-voice">        <span class="kt">for</span> <span class="vc">index</span> <span class="kt">in</span> (<span class="vc">count</span>-<span class="vc">size</span>)..&lt;<span class="vc">count</span> {</code></li>
            <li><code class="code-voice">            <span class="vc">result</span>.<span class="vc">append</span>(<span class="kt">self</span>[<span class="vc">index</span>])</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">result</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="c">// Inferred that Suffix is Stack.</span></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">stackOfInts</span> = <span class="vc">Stack</span>&lt;<span class="n"><!-- a href="" -->Int<!-- /a --></span>&gt;()</code></li>
            <li><code class="code-voice"><span class="vc">stackOfInts</span>.<span class="vc">append</span>(<span class="m">10</span>)</code></li>
            <li><code class="code-voice"><span class="vc">stackOfInts</span>.<span class="vc">append</span>(<span class="m">20</span>)</code></li>
            <li><code class="code-voice"><span class="vc">stackOfInts</span>.<span class="vc">append</span>(<span class="m">30</span>)</code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">suffix</span> = <span class="vc">stackOfInts</span>.<span class="vc">suffix</span>(<span class="m">2</span>)</code></li>
            <li><code class="code-voice"><span class="c">// suffix contains 20 and 30</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  在上面的例子中，</font></font><code class="code-voice">Suffix</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">关联的类型</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">也是</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，所以后缀操作</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">返回另一个</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">或者，符合的类型</font></font><code class="code-voice">SuffixableContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">可以具有</font></font><code class="code-voice">Suffix</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">与自身不同的类型 - 这意味着后缀操作可以返回不同的类型。</font><font style="vertical-align: inherit;">例如，下面是扩展符合性的非泛型</font></font><code class="code-voice">IntStack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型</font><font style="vertical-align: inherit;">的扩展</font></font><code class="code-voice">SuffixableContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，使用</font></font><code class="code-voice">Stack&lt;Int&gt;</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">后缀类型代替</font></font><code class="code-voice">IntStack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">extension</span> <span class="n"><!-- a href="" -->IntStack<!-- /a --></span>: <span class="n"><!-- a href="" -->SuffixableContainer<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    <span class="kt">func</span> <span class="vc">suffix</span>(<span class="kt">_</span> <span class="vc">size</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Stack<!-- /a --></span>&lt;<span class="n"><!-- a href="" -->Int<!-- /a --></span>&gt; {</code></li>
            <li><code class="code-voice">        <span class="kt">var</span> <span class="vc">result</span> = <span class="vc">Stack</span>&lt;<span class="n"><!-- a href="" -->Int<!-- /a --></span>&gt;()</code></li>
            <li><code class="code-voice">        <span class="kt">for</span> <span class="vc">index</span> <span class="kt">in</span> (<span class="vc">count</span>-<span class="vc">size</span>)..&lt;<span class="vc">count</span> {</code></li>
            <li><code class="code-voice">            <span class="vc">result</span>.<span class="vc">append</span>(<span class="kt">self</span>[<span class="vc">index</span>])</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">result</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <span class="c">// Inferred that Suffix is Stack&lt;Int&gt;.</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>

</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID192"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">通用条款</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  如类型约束中所述，</font></font><span class="x-name"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID186" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH26-ID186" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_63&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型约束</font></font></a></span><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">使您能够定义与通用函数，下标或类型关联的类型参数的需求。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  定义关联类型的需求也很有用。</font><font style="vertical-align: inherit;">你通过定义一个</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">通用的where子句来</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">做到这一点</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">泛型</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句使您能够要求相关类型必须符合特定协议，或者某些类型参数和相关类型必须相同。</font><font style="vertical-align: inherit;">通用</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句从</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">关键字</font><font style="vertical-align: inherit;">开始</font><font style="vertical-align: inherit;">，随后是关联类型的约束或类型和关联类型之间的相等关系。</font><font style="vertical-align: inherit;">您</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在类型或函数的主体的开始大括号之前</font><font style="vertical-align: inherit;">编写通用</font><font style="vertical-align: inherit;">子句。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  下面的示例定义了一个名为的泛型函数</font></font><code class="code-voice">allItemsMatch</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，它检查两个</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">实例</font><font style="vertical-align: inherit;">是否以</font><font style="vertical-align: inherit;">相同顺序包含相同的项目。</font></font><code class="code-voice">true</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">如果所有项目匹配，</font><font style="vertical-align: inherit;">该函数将返回布尔值，</font><font style="vertical-align: inherit;">如果不匹配</font><font style="vertical-align: inherit;">，</font><font style="vertical-align: inherit;">则</font><font style="vertical-align: inherit;">返回值</font></font><code class="code-voice">false</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  要检查的两个容器不必是相同类型的容器（尽管它们可以），但它们必须保持相同类型的容器。</font><font style="vertical-align: inherit;">此要求通过类型约束和通用</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句</font><font style="vertical-align: inherit;">的组合来表达</font><font style="vertical-align: inherit;">：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">func</span> <span class="vc">allItemsMatch</span>&lt;<span class="vc">C1</span>: <span class="n"><!-- a href="" -->Container<!-- /a --></span>, <span class="vc">C2</span>: <span class="n"><!-- a href="" -->Container<!-- /a --></span>&gt;</code></li>
            <li><code class="code-voice">    (<span class="kt">_</span> <span class="vc">someContainer</span>: <span class="vc">C1</span>, <span class="kt">_</span> <span class="vc">anotherContainer</span>: <span class="vc">C2</span>) -&gt; <span class="vc">Bool</span></code></li>
            <li><code class="code-voice">    <span class="kt">where</span> <span class="n"><!-- a href="" -->C1<!-- /a --></span>.<span class="n"><!-- a href="" -->Item<!-- /a --></span> == <span class="n"><!-- a href="" -->C2<!-- /a --></span>.<span class="n"><!-- a href="" -->Item<!-- /a --></span>, <span class="n"><!-- a href="" -->C1<!-- /a --></span>.<span class="n"><!-- a href="" -->Item<!-- /a --></span>: <span class="n"><!-- a href="" -->Equatable<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Check that both containers contain the same number of items.</span></code></li>
            <li><code class="code-voice">        <span class="kt">if</span> <span class="vc">someContainer</span>.<span class="vc">count</span> != <span class="vc">anotherContainer</span>.<span class="vc">count</span> {</code></li>
            <li><code class="code-voice">            <span class="kt">return</span> <span class="kt">false</span></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// Check each pair of items to see if they're equivalent.</span></code></li>
            <li><code class="code-voice">        <span class="kt">for</span> <span class="vc">i</span> <span class="kt">in</span> <span class="m">0</span>..&lt;<span class="vc">someContainer</span>.<span class="vc">count</span> {</code></li>
            <li><code class="code-voice">            <span class="kt">if</span> <span class="vc">someContainer</span>[<span class="vc">i</span>] != <span class="vc">anotherContainer</span>[<span class="vc">i</span>] {</code></li>
            <li><code class="code-voice">                <span class="kt">return</span> <span class="kt">false</span></code></li>
            <li><code class="code-voice">            }</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        </code></li>
            <li><code class="code-voice">        <span class="c">// All items match, so return true.</span></code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="kt">true</span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  这个函数有两个参数叫做</font></font><code class="code-voice">someContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">and </font></font><code class="code-voice">anotherContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">该</font></font><code class="code-voice">someContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">参数是类型</font></font><code class="code-voice">C1</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，以及</font></font><code class="code-voice">anotherContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">参数的类型的</font></font><code class="code-voice">C2</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">既</font></font><code class="code-voice">C1</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">和</font></font><code class="code-voice">C2</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">当调用该函数时要确定了两个容器类型是类型参数。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  以下要求放在函数的两个类型参数上：
</font></font></p><ul class="list-bullet">
  <li class="item"><p class="para">
  <code class="code-voice">C1</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">必须符合</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议（写为</font></font><code class="code-voice">C1: Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）。
</font></font></p>
</li><li class="item"><p class="para">
  <code class="code-voice">C2</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">还必须符合</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议（写为</font></font><code class="code-voice">C2: Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">对</font></font><code class="code-voice">C1</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">必须相同</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">的</font></font><code class="code-voice">C2</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">（写成</font></font><code class="code-voice">C1.Item == C2.Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  在</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">用于</font></font><code class="code-voice">C1</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">必须符合</font></font><code class="code-voice">Equatable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议（写为</font></font><code class="code-voice">C1.Item: Equatable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）。
</font></font></p>
</li>
</ul><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  第一个和第二个需求在函数的类型参数列表中定义，第三个和第四个需求在函数的通用</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句</font><font style="vertical-align: inherit;">中定义</font><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  这些要求意味着：
</font></font></p><ul class="list-bullet">
  <li class="item"><p class="para">
  <code class="code-voice">someContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是一种类型的容器</font></font><code class="code-voice">C1</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p>
</li><li class="item"><p class="para">
  <code class="code-voice">anotherContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是一种类型的容器</font></font><code class="code-voice">C2</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p>
</li><li class="item"><p class="para">
  <code class="code-voice">someContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">并</font></font><code class="code-voice">anotherContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">包含相同类型的项目。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"></font><code class="code-voice">someContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">可以使用不相等的运算符（</font></font><code class="code-voice">!=</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）来</font><font style="vertical-align: inherit;">检查</font><font style="vertical-align: inherit;">
  项目，</font><font style="vertical-align: inherit;">看它们是否彼此不同。
</font></font></p>
</li>
</ul><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  第三和第四的要求相结合，意味着中的项目</font></font><code class="code-voice">anotherContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">可以</font></font><em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">也</font></font></em><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">可以与检查</font></font><code class="code-voice">!=</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">经营者，因为他们是完全一样的类型中的项目</font></font><code class="code-voice">someContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  这些要求使</font></font><code class="code-voice">allItemsMatch(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数能够比较两个容器，即使它们是不同的容器类型。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">allItemsMatch(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">功能首先检查两个容器是否包含相同数量的项目。</font><font style="vertical-align: inherit;">如果它们包含不同数量的项目，则它们无法匹配，并且函数返回</font></font><code class="code-voice">false</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  在做这个检查后，函数</font></font><code class="code-voice">someContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">用</font></font><code class="code-voice">for</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">- </font></font><code class="code-voice">in</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">循环和半开范围运算符（</font></font><code class="code-voice">..&lt;</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">）</font><font style="vertical-align: inherit;">遍历所有项</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">对于每个项目，函数检查项目from </font></font><code class="code-voice">someContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是否不等于in中的相应项目</font></font><code class="code-voice">anotherContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">如果两个项目不相等，则两个容器不匹配，并且函数返回</font></font><code class="code-voice">false</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  如果循环完成而不发现不匹配，则两个容器匹配，并且函数返回</font></font><code class="code-voice">true</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  以下是该</font></font><code class="code-voice">allItemsMatch(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">功能</font><font style="vertical-align: inherit;">如何</font><font style="vertical-align: inherit;">起作用的功能：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">stackOfStrings</span> = <span class="vc">Stack</span>&lt;<span class="n"><!-- a href="" -->String<!-- /a --></span>&gt;()</code></li>
            <li><code class="code-voice"><span class="vc">stackOfStrings</span>.<span class="vc">push</span>(<span class="s">"uno"</span>)</code></li>
            <li><code class="code-voice"><span class="vc">stackOfStrings</span>.<span class="vc">push</span>(<span class="s">"dos"</span>)</code></li>
            <li><code class="code-voice"><span class="vc">stackOfStrings</span>.<span class="vc">push</span>(<span class="s">"tres"</span>)</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">arrayOfStrings</span> = [<span class="s">"uno"</span>, <span class="s">"dos"</span>, <span class="s">"tres"</span>]</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><span class="kt">if</span> <span class="vc">allItemsMatch</span>(<span class="vc">stackOfStrings</span>, <span class="vc">arrayOfStrings</span>) {</code></li>
            <li><code class="code-voice">    <span class="vc">print</span>(<span class="s">"All items match."</span>)</code></li>
            <li><code class="code-voice">} <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">    <span class="vc">print</span>(<span class="s">"Not all items match."</span>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><span class="c">// Prints "All items match."</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  上面的例子创建一个</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">存储</font></font><code class="code-voice">String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">值</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">实例</font><font style="vertical-align: inherit;">，并将三个字符串推入堆栈。</font><font style="vertical-align: inherit;">该示例还创建了一个</font></font><code class="code-voice">Array</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">使用包含与堆栈相同的三个字符串的数组字面值初始化</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">实例。</font><font style="vertical-align: inherit;">即使堆栈和阵列属于不同的类型，它们都符合</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议，并且都包含相同类型的值。</font><font style="vertical-align: inherit;">因此可以</font></font><code class="code-voice">allItemsMatch(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">用这两个容器作为参数</font><font style="vertical-align: inherit;">来调用</font><font style="vertical-align: inherit;">函数。</font><font style="vertical-align: inherit;">在上面的示例中，该</font></font><code class="code-voice">allItemsMatch(_:_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数可以正确报告两个容器中的所有项目都匹配。
</font></font></p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID553"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">扩展与通用的where子句</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  您也可以使用通用</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句作为扩展的一部分。</font><font style="vertical-align: inherit;">下面的例子扩展了</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">前面例子</font><font style="vertical-align: inherit;">的通用</font><font style="vertical-align: inherit;">结构以添加一个</font></font><code class="code-voice">isTop(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法。
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">extension</span> <span class="n"><!-- a href="" -->Stack<!-- /a --></span> <span class="kt">where</span> <span class="vc">Element</span>: <span class="vc">Equatable</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">func</span> <span class="vc">isTop</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Element<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Bool<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">guard</span> <span class="kt">let</span> <span class="vc">topItem</span> = <span class="vc">items</span>.<span class="vc">last</span> <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">            <span class="kt">return</span> <span class="kt">false</span></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">topItem</span> == <span class="vc">item</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  这个新</font></font><code class="code-voice">isTop(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法首先检查堆栈是否为空，然后比较给定的项目和堆栈的最上面的项目。</font><font style="vertical-align: inherit;">如果您尝试在没有泛型</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句的情况下执行</font></font><code class="code-voice">isTop(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">此</font></font><code class="code-voice">==</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">操作，</font><font style="vertical-align: inherit;">则会遇到问题：实现</font><font style="vertical-align: inherit;">使用</font><font style="vertical-align: inherit;">运算符，但定义</font></font><code class="code-voice">Stack</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">不要求其项目可以相等，因此使用</font></font><code class="code-voice">==</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">运算符会导致编译时错误。</font><font style="vertical-align: inherit;">使用通用</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句可让您向扩展添加新的需求，以便</font></font><code class="code-voice">isTop(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">只有当堆栈中的项目可以相等时，</font><font style="vertical-align: inherit;">扩展</font><font style="vertical-align: inherit;">才会</font><font style="vertical-align: inherit;">添加该</font><font style="vertical-align: inherit;">方法。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  以下是该</font></font><code class="code-voice">isTop(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法的实际应用情况：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">if</span> <span class="vc">stackOfStrings</span>.<span class="vc">isTop</span>(<span class="s">"tres"</span>) {</code></li>
            <li><code class="code-voice">    <span class="vc">print</span>(<span class="s">"Top element is tres."</span>)</code></li>
            <li><code class="code-voice">} <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">    <span class="vc">print</span>(<span class="s">"Top element is something else."</span>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><span class="c">// Prints "Top element is tres."</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  如果您尝试</font></font><code class="code-voice">isTop(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在其元素不相等的堆栈上</font><font style="vertical-align: inherit;">调用该</font><font style="vertical-align: inherit;">方法，则会出现编译时错误。
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">struct</span> <span class="vc">NotEquatable</span> { }</code></li>
            <li><code class="code-voice"><span class="kt">var</span> <span class="vc">notEquatableStack</span> = <span class="vc">Stack</span>&lt;<span class="n"><!-- a href="" -->NotEquatable<!-- /a --></span>&gt;()</code></li>
            <li><code class="code-voice"><span class="kt">let</span> <span class="vc">notEquatableValue</span> = <span class="vc">NotEquatable</span>()</code></li>
            <li><code class="code-voice"><span class="vc">notEquatableStack</span>.<span class="vc">push</span>(<span class="vc">notEquatableValue</span>)</code></li>
            <li><code class="code-voice"><span class="vc">notEquatableStack</span>.<span class="vc">isTop</span>(<span class="vc">notEquatableValue</span>)  <span class="c">// Error</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  您可以使用通用</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句以及对协议的扩展。</font><font style="vertical-align: inherit;">下面的例子</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">从前面的例子</font><font style="vertical-align: inherit;">扩展了</font><font style="vertical-align: inherit;">协议来添加一个</font></font><code class="code-voice">startsWith(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法。
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">extension</span> <span class="n"><!-- a href="" -->Container<!-- /a --></span> <span class="kt">where</span> <span class="vc">Item</span>: <span class="vc">Equatable</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">func</span> <span class="vc">startsWith</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Item<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Bool<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">count</span> &gt;= <span class="m">1</span> &amp;&amp; <span class="kt">self</span>[<span class="m">0</span>] == <span class="vc">item</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  该</font></font><code class="code-voice">startsWith(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法首先确保容器至少有一个项目，然后检查容器中的第一个项目是否与给定的项目匹配。</font><font style="vertical-align: inherit;">只要容器的物品是可以平衡的，</font><font style="vertical-align: inherit;">这种新</font></font><code class="code-voice">startsWith(_:)</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法就可以用于任何符合</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议的</font><font style="vertical-align: inherit;">类型</font><font style="vertical-align: inherit;">，包括上面使用的堆栈和数组。
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">if</span> [<span class="m">9</span>, <span class="m">9</span>, <span class="m">9</span>].<span class="vc">startsWith</span>(<span class="m">42</span>) {</code></li>
            <li><code class="code-voice">    <span class="vc">print</span>(<span class="s">"Starts with 42."</span>)</code></li>
            <li><code class="code-voice">} <span class="kt">else</span> {</code></li>
            <li><code class="code-voice">    <span class="vc">print</span>(<span class="s">"Starts with something else."</span>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><span class="c">// Prints "Starts with something else."</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">上面示例中</font><font style="vertical-align: inherit;">
  的通用</font><font style="vertical-align: inherit;">子句要求</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">符合协议，但您也可以编写一个通用</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句，它们需要</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">是特定的类型。</font><font style="vertical-align: inherit;">例如：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">extension</span> <span class="n"><!-- a href="" -->Container<!-- /a --></span> <span class="kt">where</span> <span class="vc">Item</span> == <span class="vc">Double</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">func</span> <span class="vc">average</span>() -&gt; <span class="n"><!-- a href="" -->Double<!-- /a --></span> {</code></li>
            <li><code class="code-voice">        <span class="kt">var</span> <span class="vc">sum</span> = <span class="m">0.0</span></code></li>
            <li><code class="code-voice">        <span class="kt">for</span> <span class="vc">index</span> <span class="kt">in</span> <span class="m">0</span>..&lt;<span class="vc">count</span> {</code></li>
            <li><code class="code-voice">            <span class="vc">sum</span> += <span class="kt">self</span>[<span class="vc">index</span>]</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        <span class="kt">return</span> <span class="vc">sum</span> / <span class="vc">Double</span>(<span class="vc">count</span>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><span class="vc">print</span>([<span class="m">1260.0</span>, <span class="m">1200.0</span>, <span class="m">98.6</span>, <span class="m">37.0</span>].<span class="vc">average</span>())</code></li>
            <li><code class="code-voice"><span class="c">// Prints "648.9"</span></code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  此示例将</font></font><code class="code-voice">average()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">方法</font><font style="vertical-align: inherit;">添加</font><font style="vertical-align: inherit;">到</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型为的</font><font style="vertical-align: inherit;">容器</font></font><code class="code-voice">Double</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">它迭代容器中的项目以将它们相加，然后除以容器的计数来计算平均值。</font><font style="vertical-align: inherit;">它明确地将count从</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">to </font></font><code class="code-voice">Double</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">转换为能够进行浮点除法。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  您可以将多个需求包含在</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">作为扩展的一部分的</font><font style="vertical-align: inherit;">通用</font><font style="vertical-align: inherit;">子句中，就像您可以为</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">其他地方编写</font><font style="vertical-align: inherit;">的通用</font><font style="vertical-align: inherit;">子句一样。</font><font style="vertical-align: inherit;">用逗号分隔列表中的每个要求。
</font></font></p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID557"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">与通用条款相关联的类型</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  您可以</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在关联的类型中</font><font style="vertical-align: inherit;">包含通用</font><font style="vertical-align: inherit;">子句。</font><font style="vertical-align: inherit;">例如，假设你想制作一个</font></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">包含迭代器</font><font style="vertical-align: inherit;">的版本</font><font style="vertical-align: inherit;">，就像</font></font><code class="code-voice">Sequence</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议在标准库中使用的那样。</font><font style="vertical-align: inherit;">以下是你如何写的：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">protocol</span> <span class="vc">Container</span> {</code></li>
            <li><code class="code-voice">    <span class="kt">associatedtype</span> <span class="vc">Item</span></code></li>
            <li><code class="code-voice">    <span class="kt">mutating</span> <span class="kt">func</span> <span class="vc">append</span>(<span class="kt">_</span> <span class="vc">item</span>: <span class="n"><!-- a href="" -->Item<!-- /a --></span>)</code></li>
            <li><code class="code-voice">    <span class="kt">var</span> <span class="vc">count</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span> { <span class="kt">get</span> }</code></li>
            <li><code class="code-voice">    <span class="kt">subscript</span>(<span class="vc">i</span>: <span class="n"><!-- a href="" -->Int<!-- /a --></span>) -&gt; <span class="n"><!-- a href="" -->Item<!-- /a --></span> { <span class="kt">get</span> }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <span class="kt">associatedtype</span> <span class="vc">Iterator</span>: <span class="n"><!-- a href="" -->IteratorProtocol<!-- /a --></span> <span class="kt">where</span> <span class="n"><!-- a href="" -->Iterator<!-- /a --></span>.<span class="n"><!-- a href="" -->Element<!-- /a --></span> == <span class="n"><!-- a href="" -->Item<!-- /a --></span></code></li>
            <li><code class="code-voice">    <span class="kt">func</span> <span class="vc">makeIterator</span>() -&gt; <span class="n"><!-- a href="" -->Iterator<!-- /a --></span></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  通用</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句on </font></font><code class="code-voice">Iterator</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">要求迭代器必须遍历与容器项目相同的项目类型的元素，而不管迭代器的类型如何。</font><font style="vertical-align: inherit;">该</font></font><code class="code-voice">makeIterator()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">函数提供对容器迭代器的访问。
</font></font></p><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  对于从另一个协议继承的协议，通过</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在协议声明中</font><font style="vertical-align: inherit;">包含通用</font><font style="vertical-align: inherit;">子句，</font><font style="vertical-align: inherit;">可以为继承的关联类型添加约束</font><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">例如，以下代码声明了</font></font><code class="code-voice">ComparableContainer</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">需要</font></font><code class="code-voice">Item</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">符合</font><font style="vertical-align: inherit;">的</font><font style="vertical-align: inherit;">协议</font></font><code class="code-voice">Comparable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">protocol</span> <span class="vc">ComparableContainer</span>: <span class="n"><!-- a href="" -->Container<!-- /a --></span> <span class="kt">where</span> <span class="n"><!-- a href="" -->Item<!-- /a --></span>: <span class="n"><!-- a href="" -->Comparable<!-- /a --></span> { }</code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40014097-CH26-ID558"></a>
  <h3 class="section-name" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">通用下标</font></font></h3>
  <p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  下标可以是通用的，并且可以包括通用的</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句。</font><font style="vertical-align: inherit;">您在后面的尖括号内写入占位符类型名称</font></font><code class="code-voice">subscript</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">，然后</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">在下标的正文的开始大括号之前</font><font style="vertical-align: inherit;">写下一个通用</font><font style="vertical-align: inherit;">子句。</font><font style="vertical-align: inherit;">例如：
</font></font></p><section class="code-listing">
  
  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="kt">extension</span> <span class="n"><!-- a href="" -->Container<!-- /a --></span> {</code></li>
            <li><code class="code-voice">    <span class="kt">subscript</span>&lt;<span class="vc">Indices</span>: <span class="vc">Sequence</span>&gt;(<span class="vc">indices</span>: <span class="n"><!-- a href="" -->Indices<!-- /a --></span>) -&gt; [<span class="n"><!-- a href="" -->Item<!-- /a --></span>]</code></li>
            <li><code class="code-voice">        <span class="kt">where</span> <span class="n"><!-- a href="" -->Indices<!-- /a --></span>.<span class="n"><!-- a href="" -->Iterator<!-- /a --></span>.<span class="n"><!-- a href="" -->Element<!-- /a --></span> == <span class="n"><!-- a href="" -->Int<!-- /a --></span> {</code></li>
            <li><code class="code-voice">            <span class="kt">var</span> <span class="vc">result</span> = [<span class="vc">Item</span>]()</code></li>
            <li><code class="code-voice">            <span class="kt">for</span> <span class="vc">index</span> <span class="kt">in</span> <span class="vc">indices</span> {</code></li>
            <li><code class="code-voice">                <span class="vc">result</span>.<span class="vc">append</span>(<span class="kt">self</span>[<span class="vc">index</span>])</code></li>
            <li><code class="code-voice">            }</code></li>
            <li><code class="code-voice">            <span class="kt">return</span> <span class="vc">result</span></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para"><font style="vertical-align: inherit;"></font><code class="code-voice">Container</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议的</font><font style="vertical-align: inherit;">
  这种扩展</font><font style="vertical-align: inherit;">添加了一个下标，它接收一系列索引并返回一个包含每个给定索引处的项目的数组。</font><font style="vertical-align: inherit;">这个通用下标的约束如下：
</font></font></p><ul class="list-bullet">
  <li class="item"><p class="para"><font style="vertical-align: inherit;"></font><code class="code-voice">Indices</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">尖括号中</font><font style="vertical-align: inherit;">
  的通用参数</font><font style="vertical-align: inherit;">必须是符合</font></font><code class="code-voice">Sequence</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">标准库协议</font><font style="vertical-align: inherit;">的类型</font><font style="vertical-align: inherit;">。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  下标采用单个参数，</font></font><code class="code-voice">indices</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">它是该</font></font><code class="code-voice">Indices</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">类型的</font><font style="vertical-align: inherit;">一个实例</font><font style="vertical-align: inherit;">。
</font></font></p>
</li><li class="item"><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  通用</font></font><code class="code-voice">where</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">子句要求序列的迭代器必须遍历类型的元素</font></font><code class="code-voice">Int</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。</font><font style="vertical-align: inherit;">这确保序列中的索引与用于容器的索引相同。
</font></font></p>
</li>
</ul><p class="para"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
  总之，这些约束条件意味着为</font></font><code class="code-voice">indices</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">参数</font><font style="vertical-align: inherit;">传递的值</font><font style="vertical-align: inherit;">是一个整数序列。
</font></font></p>
  
</section>

  	
 	<section id="next_previous" class="">
    		<p class="previous-link"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html#//apple_ref/doc/uid/TP40014097-CH25-ID267" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH25-ID267" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_64&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">协议</font></font></a></p>
  			<p class="next-link"><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-ID48" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40014097-CH20-ID48" onclick="s_objectID=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Lang_65&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">自动引用计数</font></font></a></p>

    <p class="copyright"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Copyright©2018 Apple Inc.保留所有权利。 
  </font></font><a class="link" href="http://www.apple.com/legal/terms/site.html" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/legal/terms/site.html_1&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">使用条款</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> | 
  </font></font><a class="link" href="http://www.apple.com/privacy/" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/privacy/_1&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">隐私政策</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> | </font><font style="vertical-align: inherit;">更新日期：2018-02-20
</font></font></p>
  </section>
</article>

    </div>
    <div id="big_button"></div>
    <footer id="footer">
  <div class="content-wrapper">
  	<div id="leave_feedback" class="button" role="button" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">反馈</font></font></div>
  </div>
  <script src="./Swift编程语言（Swift 4.1）：泛型_files/devpubs-1.6.3.js" type="text/javascript" charset="utf-8"></script>
  <script src="./Swift编程语言（Swift 4.1）：泛型_files/feedback-1.6.3.js" type="text/javascript" charset="utf-8"></script>
  <div id="_omniture_top">
<!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. -->
<script type="text/javascript">
/* RSID: */
var s_account="appleglobal,appleusdeveloper,dappdeveloperlib"
</script>

<script type="text/javascript" src="./Swift编程语言（Swift 4.1）：泛型_files/s_code_h.js"></script>
<script type="text/javascript">
s.pageName=AC.Tracking.pageName();
s.channel="www.us.developer"

/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
var s_code=s.t();if(s_code)document.write(s_code)</script>
<!-- End SiteCatalyst code version: H.8. -->
</div>

</footer>

    
  
    <div id="blackout">
    <div id="preload"></div>
</div>
<div id="modal" aria-hidden="true">
    <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div>
    <div id="sending" class="hidden">
        <h2 tabindex="0">Sending feedback…</h2>
        <div id="sending_img"></div>
    </div>
    <div id="error" class="hidden">
        <h2 tabindex="0">We’re sorry, an error has occurred.</h2>
        <p>Please try submitting your feedback later.</p>
        <div id="error_icon"></div>
    </div>
    <div id="success" class="hidden">
        <h2 tabindex="0">Thank you for providing feedback!</h2>
        <p>Your input helps improve our developer documentation.</p>
        <div id="thank_you_icon"></div>
    </div>
    
    <form id="feedback" action="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#" method="post">
        <div class="left-leaf">
            <h2 id="helpful_title" data-asterisk="a1" tabindex="0"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">这份文件有多大帮助？</font></font></h2>     
            <sup id="a1" class="asterisk" aria-hidden="true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">*</font></font></sup>

            <div id="star_group" role="radiogroup" aria-required="true">
                <label> 
                    <input class="radio" type="radio" name="helped" value="1"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 
                    很有帮助
                </font></font></label>
                <label> 
                    <input class="radio" type="radio" name="helped" value="2"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 
                    有点帮助
                </font></font></label>
                <label>
                    <input class="radio" type="radio" name="helped" value="3"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 
                    没有帮助
                </font></font></label>
            </div>
        </div>
        <div class="right-leaf">
            <h2><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">我们如何改进这个文件？</font></font></h2>
            <div id="improve" class="checkboxes">
                <label>
                    <input type="checkbox" name="typo"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 
                    修正错别字或链接
                </font></font></label>
                <label>
                    <input type="checkbox" name="infoIncorrect"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 
                    修正错误的信息
                </font></font></label>
                <label>
                    <input type="checkbox" name="needs_examples"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 
                    添加或更新代码示例
                </font></font></label>
                <label>
                    <input type="checkbox" name="needs_art"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 
                    添加或更新插图
                </font></font></label>
                <label>
                    <input type="checkbox" name="missingInfo"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 
                    添加有关...的信息
                </font></font></label>
            </div>
        </div>

        <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required=""></textarea>
        <sup id="a2" class="asterisk" aria-hidden="true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">*</font></font></sup>

        <p class="fineprint">
            <em aria-hidden="true"><span><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">*</font></font></span><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">必填信息</font></font></em>
        </p> 

        <font style="vertical-align: inherit;"><font style="vertical-align: inherit;"><input id="submit" type="button" value="发送"></font></font>

        <section id="legal">
            <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
                要提交产品错误或增强请求，请访问 
                 </font></font><a href="https://developer.apple.com/bugreporter/" target="_blank" onclick="s_objectID=&quot;https://developer.apple.com/bugreporter/_1&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Bug Reporter</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">  
                页面。
            </font></font></p>
            <p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 
                在您向我们发送反馈之前，</font><font style="vertical-align: inherit;">
                请阅读</font></font><a href="http://www.apple.com/legal/policies/ideas.html" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/legal/policies/ideas.html_1&quot;;return this.s_oc?this.s_oc(e):true"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Apple的未经请求的意见提交政策</font></font></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">。
            </font></font></p> 
        </section>
    </form>
</div><div id="goog-gt-tt" class="skiptranslate" dir="ltr"><div style="padding: 8px;"><div><div class="logo"><img src="./Swift编程语言（Swift 4.1）：泛型_files/translate_24dp.png" width="20" height="20" alt="Google 翻译"></div></div></div><div class="top" style="padding: 8px; float: left; width: 100%;"><h1 class="title gray">原文</h1></div><div class="middle" style="padding: 8px;"><div class="original-text"></div></div><div class="bottom" style="padding: 8px;"><div class="activity-links"><span class="activity-link">提供更好的翻译建议</span><span class="activity-link"></span></div><div class="started-activity-container"><hr style="color: #CCC; background-color: #CCC; height: 1px; border: none;"><div class="activity-root"></div></div></div><div class="status-message" style="display: none;"></div></div>



<div class="goog-te-spinner-pos"><div class="goog-te-spinner-animation"><svg xmlns="http://www.w3.org/2000/svg" class="goog-te-spinner" width="96px" height="96px" viewBox="0 0 66 66"><circle class="goog-te-spinner-path" fill="none" stroke-width="6" stroke-linecap="round" cx="33" cy="33" r="30"></circle></svg></div></div></body></html>